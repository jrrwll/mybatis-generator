package $mapper_package;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by $generator_name
 *
 * @author $username
 * @version $date
 * @see <a href="https://github.com/jrrwll">Jerry Will's Github</a>
 */
public class $condition_type {

    protected String orderBy;
    protected int limit;
    protected int offset;
    protected List<Criteria> criteriaList;

    public $condition_type() {
        criteriaList = new ArrayList<>();
    }

    public $condition_type appendOrderBy(Order order, boolean desc) {
        String sortType = desc ? "desc" : "asc";
        if (null != orderBy) {
            orderBy = orderBy + ", " + order.getColumnName() + " " + sortType;
        } else {
            orderBy = order.getColumnName() + " " + sortType;
        }
        return this;
    }

    public String getOrderBy() {
        return orderBy;
    }

    public int getLimit() {
        return limit;
    }

    public void setLimit(int limit) {
        this.limit = limit;
    }

    public int getOffset() {
        return offset;
    }

    public void setOffset(int offset) {
        this.offset = offset;
    }

    public List<Criteria> getCriteriaList() {
        return criteriaList;
    }

    public void or(Criteria criteria) {
        criteriaList.add(criteria);
    }

    public Criteria or() {
        Criteria criteria = new Criteria();
        criteriaList.add(criteria);
        return criteria;
    }

    public Criteria createCriteria() {
        Criteria criteria = new Criteria();
        if (criteriaList.isEmpty()) {
            criteriaList.add(criteria);
        }
        return criteria;
    }

    public void clear() {
        criteriaList.clear();
        orderBy = null;

    }

    public static class Criteria {

        protected List<Criterion> criteria = new ArrayList<>();

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new NullPointerException("condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new NullPointerException(property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new NullPointerException("between condition for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        $criteria_method_list
    }

    public static class Criterion {

        private final String condition;

        private final String typeHandler;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        public String getCondition() {
            return condition;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        protected Criterion(String condition) {
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public enum Order {
        $column_enum_list;

        private final String columnName;

        Order(String columnName) {
            this.columnName = columnName;
        }

        public String getColumnName() {
            return columnName;
        }

        @Override
        public String toString() {
            return columnName;
        }
    }
}